rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Global Helper function to check if a string is not empty and within a reasonable length
    function isString(value, minLength, maxLength) {
      return value is string && value.size() >= minLength && value.size() <= maxLength;
    }

    // Global Helper function to validate fileName (allows most common characters, incl. spaces, dots, dashes, underscores)
    function isValidFileName(name) {
      // Allows \\w, \\s, and specific punctuation. Max 255 chars.
      // Disallows names that are only "." or "..".
      // Punctuation set: ! # $ % & ' ( ) * + , - . / : ; < = > ? @ [ ] ^ _ ` { | } ~
      // Backslashes are doubled for Firestore string literals (e.g., \\w in regex becomes \\\\w in the string).
      let pattern = '^[\\\\w\\\\s!#\\\\$%&\'\\\\(\\\\)\\\\\\*\\\\+,\\\\-\\\\.\\\\/:;<=>\\\\?\\\\@\\\\[\\\\]\\\\^\\\\_`\\\\{\\\\|\\\\}~]{1,255}$';
      return name.matches(pattern) && !(name == '.' || name == '..') && isString(name, 1, 255);
    }

    // Global Helper function to validate contentType and ensure it's not video
    function isValidContentTypeAndNotVideo(type) {
      let generalMimePattern = '^[a-zA-Z0-9\\-\\+\\.]+\\/[a-zA-Z0-9\\-\\+\\.]+$';
      let isGeneralMime = type.matches(generalMimePattern) && isString(type, 3, 128);
      let isVideo = type.matches('^video\\/.*$'); // Match "video/*"
      return isGeneralMime && !isVideo;
    }

    // Rate Limits Collection
    match /rateLimits/{email} {
      // Allow unauthenticated access for login rate limiting
      allow read, write: if true;
    }

    // Users Collection
    match /users/{userId} {
      // CREATE: User can create their own document
      allow create: if request.auth != null &&
                       request.auth.uid == userId &&
                       isString(request.resource.data.email, 1, 255) &&
                       (request.resource.data.displayName == null || isString(request.resource.data.displayName, 1, 100)) &&
                       request.resource.data.roles is list &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      // READ: User can read their own document
      allow read: if request.auth != null &&
                     request.auth.uid == userId;

      // UPDATE: User can update their own document
      allow update: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.resource.data.uid == resource.data.uid && // uid cannot change
                       request.resource.data.createdAt == resource.data.createdAt && // createdAt cannot change
                       isString(request.resource.data.email, 1, 255) &&
                       (request.resource.data.displayName == null || isString(request.resource.data.displayName, 1, 100)) &&
                       request.resource.data.roles is list &&
                       request.resource.data.updatedAt == request.time;

      // DELETE: User can delete their own document
      allow delete: if request.auth != null &&
                       request.auth.uid == userId;
      
      // Nested Projects Collection
      match /projects/{projectId} {
        // CREATE: User can create a project in their user document
        allow create: if request.auth != null &&
                         request.auth.uid == userId &&
                         isString(request.resource.data.projectName, 1, 100) &&
                         request.resource.data.createdAt == request.time &&
                         request.resource.data.updatedAt == request.time;

        // READ: User can read their projects
        allow read: if request.auth != null &&
                       request.auth.uid == userId;

        // UPDATE: User can update their projects
        allow update: if request.auth != null &&
                         request.auth.uid == userId &&
                         request.resource.data.createdAt == resource.data.createdAt &&
                         (request.resource.data.projectName != resource.data.projectName ? isString(request.resource.data.projectName, 1, 100) : true) &&
                         request.resource.data.updatedAt == request.time;

        // DELETE: User can delete their projects
        allow delete: if request.auth != null &&
                         request.auth.uid == userId;

        // Nested Credentials Collection
        match /credentials/{credentialId} {
          // CREATE: User can create credentials in their projects
          allow create: if request.auth != null &&
                           request.auth.uid == userId;

          // READ: User can read their credentials
          allow read: if request.auth != null &&
                         request.auth.uid == userId;

          // UPDATE: User can update their credentials
          allow update: if request.auth != null &&
                           request.auth.uid == userId &&
                           request.resource.data.createdAt == resource.data.createdAt &&
                           (request.resource.data.serviceName != resource.data.serviceName ? isString(request.resource.data.serviceName, 1, 100) : true) &&
                           (request.resource.data.encryptedApiKey != resource.data.encryptedApiKey ? isString(request.resource.data.encryptedApiKey, 1, 2048) : true) &&
                           (request.resource.data.encryptedApiSecret != resource.data.encryptedApiSecret ? (request.resource.data.encryptedApiSecret == null || isString(request.resource.data.encryptedApiSecret, 0, 2048)) : true) &&
                           (request.resource.data.encryptedNotes != resource.data.encryptedNotes ? (request.resource.data.encryptedNotes == null || isString(request.resource.data.encryptedNotes, 0, 4096)) : true) &&
                           (request.resource.data.iv != resource.data.iv ? isString(request.resource.data.iv, 32, 32) : true) &&
                           request.resource.data.updatedAt == request.time;

          // DELETE: User can delete their credentials
          allow delete: if request.auth != null &&
                           request.auth.uid == userId;
        }

        // Rule for listing files in the 'files' collection
        match /files {
          allow list: if request.auth != null && request.auth.uid == userId;
        }

        // Nested Files Collection
        match /files/{fileDocId} {

          // CREATE: User can create file metadata in their projects
          allow create: if request.auth != null &&
                           request.auth.uid == userId &&
                           isValidContentTypeAndNotVideo(request.resource.data.contentType) &&
                           request.resource.data.size is number && 
                           request.resource.data.size >= 0 && 
                           request.resource.data.size <= 10 * 1024 * 1024 && // Max 10MB, consistent with storage rules
                           request.resource.data.projectId == projectId &&
                           request.resource.data.userId == userId;

          // READ: User can read their file metadata
          allow read: if request.auth != null &&
                         request.auth.uid == userId;

          // UPDATE: Disallow direct updates to file metadata.
          // If a file's content or fundamental metadata (like name for storage path purposes) changes,
          // it should typically be handled as a delete & new upload to ensure consistency.
          // Specific non-critical metadata fields could be allowed if necessary in the future.
          allow update: if false;

          // DELETE: User can delete their file metadata (should accompany Storage file deletion)
          allow delete: if request.auth != null &&
                           request.auth.uid == userId;
        }
      }
    }

    // Legacy Collections (for migration)
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow delete: if request.auth != null;
    }

    match /credentials/{credentialId} {
      allow read: if request.auth != null;
      allow delete: if request.auth != null;
    }
  }
}